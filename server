package com.softeem.clound.server;

import java.io.File;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;

import com.softeem.clound.ToolsAndUI.Tools;

/***
 * 云端共享服务器：
 * 实现多用户云端共享资源
 * @author gq
 *
 */
public class CloudServer extends Thread {
	/** 套接字 */
	private Socket s;
	/** 文件Map集合 */
	Map<String, File> map = new HashMap<String, File>();
	/** 服务器暂存文件的文件夹（这里我用电脑作为服务器） */
	File file = new File("C:\\Users\\14252\\Desktop\\keepFiles");

	/**
	 * 定义构造器初始化套接字
	 * 
	 * @param s
	 */
	public CloudServer(Socket s) {
		this.s = s;
	}

	@Override
	public void run() {
		File files[] = file.listFiles();
		// 先将服务器文件加入到结合中去
		for (File file : files) {
			map.put(file.getName(), file);
		}
		// 先询问用户下载还是上传
		try {
			/*
			 * // 将选择发送给用户 String msg = "欢迎进入云端共享(先选择您的操作)";
			 * Tools.sendMsg(s.getOutputStream(), msg);
			 */
			// 接收到用户的回复
			String s1 = Tools.getMsg(s.getInputStream());
			// 得到用户请求进行操作
			if (s1.equals("1")) {
				Tools.tips("用户选择了下载操作！");
				downLoad();
			} else if ("2".equals(s1)) {
				Tools.tips("用户选择了上传操作！");
				upLoad();
			}
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}

	}

	/**
	 * 下载文件
	 * 
	 * @throws IOException
	 */
	private void downLoad() throws IOException {
		/**
		 * 将文件集合序列化传给用户
		 */
		Tools.transObject(map, s.getOutputStream());
		// 得到用户下载文件的名字(用户发来的名字可能有空格，去除空格)
		String name = Tools.getMsg(s.getInputStream()).trim();
		// 通过对面传过来的文件名找到文件
		File file = map.get(name);
		// 将文件传输给用户
		Tools.transFile(s.getOutputStream(), file);
		// 将传输成功的信息打印到控制台
		Tools.tips(file.getName() + ":传输完成");
		// 通过半关闭将输出流关闭，解决服务端阻塞问题
		s.shutdownOutput();
	}

	/**
	 * 用户上传文件
	 * 
	 * @throws IOException
	 * @throws ClassNotFoundException
	 */
	private void upLoad() throws ClassNotFoundException, IOException {
		// 通过对象序列化得到文件对象
		Object obj = Tools.getObject(s.getInputStream());
		File f = (File) obj;
		// 设置好文件路径
		file = new File(file, f.getName());
		// 传输信息解决阻塞问题
		Tools.sendMsg(s.getOutputStream(), "");
		// 获取文件
		Tools.getFile(s.getInputStream(), file);
		// 服务器控制台显示用户下载成功
		Tools.tips(file.getName() + "  文件上传成功");
	}

	public static void main(String[] args) throws IOException {
		// 设置一个端口为5555的服务器
		ServerSocket server = new ServerSocket(5555);
		// 不断循环接收多个用户请求
		while (true) {
			// 监听用户请求
			Socket s = server.accept();
			// 当监听到用户请求时，创建线程执行任务
			new CloudServer(s).start();
			// 将每个客户进入到服务器的信息打印到控制台
			Tools.tips("客户端访问了服务器：" + s.getInetAddress().getHostAddress());
		}
	}

}
————————————————
版权声明：本文为CSDN博主「Mr.HOGO」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/m0_47547434/java/article/details/107595204
